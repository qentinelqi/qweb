# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests Reusable

on:
  workflow_call:
    inputs:
      os:
        description: 'Stringified JSON object listing target os'
        required: true
        type: string
      browser:
        description: 'Stringified JSON object listing target browsers'
        required: true
        type: string
      python-version:
        description: 'Stringified JSON object listing target Python versions'
        required: true
        type: string
      rfw-4x-python:
        description: Python version which will be used with RFW 4.x
        required: true
        type: string
      rfw-exclude-tags:
        description: Tag exclusions which will be added to RFW execution. For example  "-e FLASK"
        required: false
        default: ""
        type: string
      additional-rfw-parameters:
        description: Execution parameters which will be added to RFW execution. For example "-v customvar:somevalue"
        required: false
        default: ""
        type: string

jobs:
  Tests:
    name: ${{ matrix.python-version }} / ${{ matrix.browser }}
    
    strategy:
      # MacOS & Windows tests often fail due to webdriver errors
      fail-fast: false
      matrix:
        os: ${{fromJson(inputs.os)}}
        browser: ${{fromJson(inputs.browser)}}
        python-version: ${{fromJson(inputs.python-version)}}
        
    runs-on: ${{ matrix.os }}
    env:
      # Used in Linux tests for windowing
      DISPLAY: :88

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Linux windowing
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install matchbox scrot
        pip install python-xlib
        Xvfb $DISPLAY -screen 0 1920x1080x24 &
        sleep 1
        matchbox-window-manager -use_titlebar no &
        touch /home/runner/.Xauthority
        pushd /home/runner
        xauth generate $DISPLAY .
        popd

    - name: Install RFW 4.x
      if: matrix.python-version == inputs.rfw-4x-python
      run: |
        python -m pip install robotframework==4.1.3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
        pip install -e .

    - name: Display Python version
      run: |
        python -c "import sys; print(sys.version)"

    - name: Display Robot FW version
      run: |
        python -m pip show robotframework

    - name: Display screen resolution
      run: |
        python -c "import pyautogui; print(pyautogui.size())"

    - name: Unit tests
      run: |
       pytest -v --junit-xml=unittests.xml --cov=QWeb

    # if this test suite fails then a proper test run won't be attempted
    - name: Safari smoke test
      if: matrix.browser == 'safari'
      run: >
        python -m robot
        -v BROWSER:${{ matrix.browser }}
        -d result
        --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        -b debug.txt
        --consolecolors
        ansi
        test/acceptance/safari_smoke.robot

    # There can be only a single instance of Safari + webdriver so parallel exec is impossible
    # https://developer.apple.com/documentation/webkit/about_webdriver_for_safari#2957226
    - name: Acceptance tests safari
      id: initial-acceptance-tests-safari
      if: matrix.browser == 'safari'
      continue-on-error: true
      timeout-minutes: 30
      run: >
        python -m robot
        -o windowed.xml
        --exitonfailure 
        ${{ inputs.additional-rfw-parameters }}
        ${{ inputs.rfw-exclude-tags }}
        -e jailed -e PROBLEM_IN_${{ runner.os }}
        -e PROBLEM_IN_${{ matrix.browser }}
        -v BROWSER:${{ matrix.browser }}
        -d result
        --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        -b debug.txt
        --consolecolors ansi
        test/acceptance

    - name: Rerun failed acceptance tests safari
      if: steps.initial-acceptance-tests-safari.outcome == 'failure'
      continue-on-error: true
      timeout-minutes: 30
      run: >
        python -m robot
        --rerunfailedsuites result/output.xml
        -o rerun-windowed.xml
        --exitonfailure 
        ${{ inputs.additional-rfw-parameters }}
        ${{ inputs.rfw-exclude-tags }}
        -e jailed -e PROBLEM_IN_${{ runner.os }}
        -e PROBLEM_IN_${{ matrix.browser }}
        -v BROWSER:${{ matrix.browser }}
        -d result
        --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        -b debug.txt
        --consolecolors ansi
        test/acceptance

    - name: Acceptance tests windowed
      id: initial-acceptance-tests-windowed
      if: matrix.browser != 'safari'
      continue-on-error: true
      timeout-minutes: 15
      run: >
        python -m robot
        -i windowed
        -i FLASK
        -o windowed.xml
        --exitonfailure 
        ${{ inputs.additional-rfw-parameters }}
        ${{ inputs.rfw-exclude-tags }}
        -e jailed -e PROBLEM_IN_${{ runner.os }}
        -e PROBLEM_IN_${{ matrix.browser }}
        -v BROWSER:${{ matrix.browser }}
        -d result
        --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        -b debug.txt
        --consolecolors ansi
        test/acceptance
    
    - name: Acceptance tests headless
      id: initial-acceptance-tests-headless
      if: matrix.browser != 'safari'
      continue-on-error: true
      timeout-minutes: 10
      run: >
        python -m pabot.pabot
        -e windowed
        -e FLASK
        -o headless.xml
        --exitonfailure 
        ${{ inputs.additional-rfw-parameters }}
        ${{ inputs.rfw-exclude-tags }}
        -e jailed -e PROBLEM_IN_${{ runner.os }}
        -e PROBLEM_IN_${{ matrix.browser }}
        -v BROWSER:${{ matrix.browser }}
        -d result
        --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        -b debug.txt
        --consolecolors ansi
        test/acceptance
    
    - name: Rerun failed acceptance tests windowed
      if: steps.initial-acceptance-tests-windowed.outcome == 'failure'
      continue-on-error: true
      timeout-minutes: 15
      run: >
        python -m robot
        --rerunfailedsuites result/windowed.xml
        -o rerun-windowed.xml
        --exitonfailure 
        ${{ inputs.additional-rfw-parameters }}
        -v BROWSER:${{ matrix.browser }}
        -d result
        --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        -b debug.txt
        --consolecolors ansi
        test/acceptance

    - name: Rerun failed acceptance tests headless
      if: steps.initial-acceptance-tests-headless.outcome == 'failure'
      continue-on-error: true
      timeout-minutes: 10
      run: >
        python -m pabot.pabot
        --rerunfailedsuites result/headless.xml
        -o rerun-headless.xml
        --exitonfailure 
        ${{ inputs.additional-rfw-parameters }}
        -v BROWSER:${{ matrix.browser }}
        -d result
        --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        -b debug.txt
        --consolecolors ansi
        test/acceptance

    # robot returns amount of failed tests, github considers it as a failure and stops step execution
    # -> result merging needs a separate step
    - name: Merge initial windowed and headless test results
      if: matrix.browser != 'safari'
      run: >
        python -m robot.rebot
        --merge
        -d result
        -o output.xml
        result/windowed.xml
        result/headless.xml
    
    # Also merges Safari reruns
    - name: Merge rerun windowed test results  
      if: steps.initial-acceptance-tests-windowed.outcome == 'failure' || steps.initial-acceptance-tests-safari.outcome == 'failure'
      run: >
        python -m robot.rebot
        --merge
        -d result
        -o output.xml
        result/output.xml
        result/rerun-windowed.xml

    - name: Merge rerun headless test results  
      if: steps.initial-acceptance-tests-headless.outcome == 'failure'
      run: >
        python -m robot.rebot
        --merge
        -d result
        -o output.xml
        result/output.xml
        result/rerun-headless.xml
    
    - name: Archive Robot Framework Tests Report
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        path: ./result
