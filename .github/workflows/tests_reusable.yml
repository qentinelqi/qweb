# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests Reusable

on:
  workflow_call:
    inputs:
      os:
        description: 'Stringified JSON object listing target os'
        required: true
        type: string
      browser:
        description: 'Stringified JSON object listing target browsers'
        required: true
        type: string
      python-version:
        description: 'Stringified JSON object listing target Python versions'
        required: true
        type: string
      rfw-4x-python:
        description: Python version which will be used with RFW 4.x
        required: true
        type: string
      rfw-exclude-tags:
        description: Tag exclusions which will be added to RFW execution. For example  "-e FLASK"
        required: false
        default: ""
        type: string
      additional-rfw-parameters:
        description: Execution parameters which will be added to RFW execution. For example "-v customvar:somevalue"
        required: false
        default: ""
        type: string

jobs:
  Tests:
    name: ${{ matrix.python-version }} / ${{ matrix.browser }}
    
    strategy:
      # MacOS & Windows tests often fail due to webdriver errors
      fail-fast: false
      matrix:
        os: ${{fromJson(inputs.os)}}
        browser: ${{fromJson(inputs.browser)}}
        python-version: ${{fromJson(inputs.python-version)}}
        
    runs-on: ${{ matrix.os }}
    env:
      # Used in Linux tests for windowing
      DISPLAY: :88

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Linux windowing
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install matchbox scrot
        pip install python-xlib
        Xvfb $DISPLAY -screen 0 1920x1080x24 &
        sleep 1
        matchbox-window-manager -use_titlebar no &
        touch /home/runner/.Xauthority
        pushd /home/runner
        xauth generate $DISPLAY .
        popd

    - name: Install RFW 4.x
      if: matrix.python-version == inputs.rfw-4x-python
      run: |
        python -m pip install robotframework==4.1.3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt

    - name: Display Python version
      run: |
        python -c "import sys; print(sys.version)"

    - name: Display Robot FW version
      run: |
        python -m pip show robotframework

    - name: Display screen resolution
      run: |
        python -c "import pyautogui; print(pyautogui.size())"

    - name: Unit tests
      run: |
       pytest -v --junit-xml=unittests.xml --cov=QWeb

    - name: Acceptance tests
      id: initial-acceptance-tests
      continue-on-error: true
      timeout-minutes: 30
      run: |
        python -m pabot.pabot --ordering test/.pabotsuitenames --exitonfailure ${{ inputs.additional-rfw-parameters }} ${{ inputs.rfw-exclude-tags }} -e jailed -e PROBLEM_IN_${{ runner.os }} -e PROBLEM_IN_${{ matrix.browser }} -v BROWSER:${{ matrix.browser }} -d result --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }} -b debug.txt --consolecolors ansi test/acceptance
    
    - name: Rerun failed acceptance tests
      if: steps.initial-acceptance-tests.outcome == 'failure'
      continue-on-error: true
      timeout-minutes: 30
      run: |
        python -m pabot.pabot --ordering test/.pabotsuitenames --rerunfailedsuites result/output.xml -o rerun.xml --exitonfailure ${{ inputs.additional-rfw-parameters }} -e jailed -e PROBLEM_IN_${{ runner.os }} -e PROBLEM_IN_${{ matrix.browser }} -v BROWSER:${{ matrix.browser }} -d result --name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }} -b debug.txt --consolecolors ansi test/acceptance

    # robot returns amount of failed tests, github considers it as a failure and stops step execution
    # -> result merging needs a separate step
    - name: Merge rerun test results  
      if: steps.initial-acceptance-tests.outcome == 'failure'
      run: |
        python -m robot.rebot --merge -d result result/output.xml result/rerun.xml
    
    - name: Archive Robot Framework Tests Report
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        path: ./result
